#!/bin/bash

# StreamTalk WebRTC Implementation Test Guide
# ==========================================

echo "🎙️ StreamTalk WebRTC Testing Guide"
echo "==================================="
echo ""

echo "📋 Manual Testing Checklist:"
echo ""

echo "1. HOST SETUP:"
echo "   ✅ Go to /streamer/dashboard"
echo "   ✅ Create a session (click 'Start Session')"
echo "   ✅ Verify host participant is created in Firestore"
echo "   ✅ Check browser console for '[StreamerDashboard] Host session initialized successfully'"
echo "   ✅ Verify microphone permission is granted"
echo "   ✅ Copy the invite link"
echo ""

echo "2. VIEWER SETUP:"
echo "   ✅ Open invite link in new browser/incognito window"
echo "   ✅ Enter name and click 'Join Queue to Speak'"
echo "   ✅ Check console for '[ViewerInterface] Participant created with ID: xxx'"
echo "   ✅ Verify participant appears in Firestore under /rooms/{roomId}/participants/"
echo "   ✅ Check that viewer can hear host audio"
echo ""

echo "3. WEBRTC CONNECTION:"
echo "   ✅ Host should see new participant in queue"
echo "   ✅ Check console for '[WebRTC] Creating peer connection to xxx, initiator: true'"
echo "   ✅ Viewer should show 'Host Audio: Connected'"
echo "   ✅ Check Firestore for signals at /rooms/{roomId}/participants/{participantId}/signals/"
echo ""

echo "4. SPEAKING FLOW:"
echo "   ✅ Host clicks 'Select' on a viewer"
echo "   ✅ Viewer should be prompted for microphone permission"
echo "   ✅ Viewer interface should show 'You're Speaking!'"
echo "   ✅ Host should hear viewer audio"
echo "   ✅ Check console for peer 'stream' and 'connect' events"
echo ""

echo "5. FIRESTORE STRUCTURE CHECK:"
echo "   Expected structure:"
echo "   📁 /rooms/{roomId}/"
echo "   ├── room document (hostId, hostParticipantId, title, etc.)"
echo "   └── 📁 participants/"
echo "       ├── {hostParticipantId}/ (isHost: true)"
echo "       │   └── 📁 signals/ (WebRTC signaling docs)"
echo "       └── {viewerParticipantId}/ (isHost: false)"
echo "           └── 📁 signals/ (WebRTC signaling docs)"
echo ""

echo "6. CONSOLE LOG VERIFICATION:"
echo "   Expected logs sequence:"
echo "   🔧 [Firestore] Creating host participant for room xxx"
echo "   🔧 [WebRTC] Initializing audio..."
echo "   🔧 [Firestore] Adding participant to room xxx"
echo "   🔧 [WebRTC] Creating peer connection to xxx, initiator: true"
echo "   🔧 [WebRTC] Sending offer signal to xxx"
echo "   🔧 [Firestore] Signal added with ID: xxx"
echo "   🔧 [WebRTC] Processing incoming answer signal"
echo "   🔧 [WebRTC] Received stream from xxx"
echo ""

echo "🚨 TROUBLESHOOTING:"
echo ""
echo "❌ No audio connection:"
echo "   - Check browser console for WebRTC errors"
echo "   - Verify HTTPS (required for getUserMedia)"
echo "   - Check if signals are being created/deleted in Firestore"
echo "   - Try refreshing both windows"
echo ""

echo "❌ Signals not exchanging:"
echo "   - Verify participantId consistency between components"
echo "   - Check Firestore rules allow read/write to signals subcollection"
echo "   - Look for 'initiator' mismatch in peer creation"
echo ""

echo "❌ Host participant missing:"
echo "   - Check if createHostParticipant is called on session start"
echo "   - Verify hostParticipantId is saved to room document"
echo ""

echo "🔍 DEBUG COMMANDS:"
echo ""
echo "Check Firestore directly:"
echo "firebase firestore:shell"
echo "db.collection('rooms').get().then(snap => snap.docs.map(doc => ({id: doc.id, ...doc.data()})))"
echo ""

echo "Chrome WebRTC internals:"
echo "chrome://webrtc-internals/"
echo ""

echo "✅ SUCCESS CRITERIA:"
echo "1. Host can hear multiple viewers when they speak"
echo "2. Viewers can hear host audio continuously"
echo "3. Audio quality is clear without echo/feedback"
echo "4. Firestore signals are created and cleaned up properly"
echo "5. Console shows successful peer connections and streams"
echo ""

echo "🎯 Test with 2-3 viewers simultaneously for full verification!"